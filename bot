import telebot
from telebot import types
import data

bot = telebot.TeleBot('362959:AAE512gapIbQlYBEL2Nk8jiGY0TUf70JMPg')

user_cart = {}

@bot.message_handler(commands=['start'])
def start(message):
    user = data.check_user()
    user_id = message.from_user.id
    if user_id not in user:
        mess = f'–ü—Ä–∏–≤–µ—Ç <b><u>{message.from_user.first_name}</u></b>! –Ø –±–æ—Ç —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ booky_uz!'
        mess_2 = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–ù–∞–ø—Ä–∏–º–µ—Ä, +998xx xxx xx xx'
        kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        reg_button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        kb.add(reg_button)
        bot.send_message(message.from_user.id, mess, parse_mode='html')
        bot.send_message(message.from_user.id, mess_2, reply_markup=kb)
        bot.register_next_step_handler(message, register)
    elif user_id in user:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        item_1 = types.KeyboardButton('üõí –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑')
        item_2 = types.KeyboardButton('‚úç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
        kb.add(item_1, item_2)
        mess = f'–ü—Ä–∏–≤–µ—Ç <b><u>{message.from_user.first_name}</u></b>! –Ø –±–æ—Ç —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ booky_uz!'
        bot.send_message(message.from_user.id, mess, parse_mode='html', reply_markup=kb)


def register(message):
    data.register(message.from_user.id, message.contact.phone_number or message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item_1 = types.KeyboardButton('üõí –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑')
    item_2 = types.KeyboardButton('‚úç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
    kb.add(item_1, item_2)
    bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!', reply_markup=kb)

# @bot.message_handler(content_types=['location'])
# def location (message):
#     if message.location is not None:
#         bot.send_message(message.from_user.id, f"latitude: {message.location.latitude}; longitude: {message.location.longitude}")
#         bot.send_location(342668984, message.location.latitude, message.location.longitude)
#

@bot.message_handler(content_types=['text'])
def main(message):
    if message.text == 'üõí –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑':
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        keyboard.add(button_geo)
        bot.send_message(message.chat.id, "üìç –ü–æ–¥–µ–ª–∏—Å—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", reply_markup=keyboard)
        bot.register_next_step_handler(message, product)
    elif message.text == '‚úç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤(—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é)')
        bot.register_next_step_handler(message, feedback)
    else: start(message)

def product(message):
    if message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        users_cart = data.get_cart(message.from_user.id)
        o = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞\n\n'
        u = []
        r = 0
        n = ''
        for i in users_cart:
            all = i[-1]*i[2]
            k = f'{i[-1]} ‚úñÔ∏è {i[1]} = {all} —Å—É–º\n\n'
            o += k
            u.append(all)

        for b in users_cart:
            k = b[1]
            n+=k

        for i in u:
            r+=i

        del_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        udalit = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å')
        oformit = types.KeyboardButton('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å')
        contin = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏–º ‚û°Ô∏è')
        del_keyboard.add(udalit,oformit,contin)
        bot.send_message(message.from_user.id, f'{o}\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:   {r} —Å—É–º', reply_markup=del_keyboard)
        bot.register_next_step_handler(message, prodoljit_ili_oformit, n)
    else:
        book_name_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        books = data.get_products()
        o = [i[0] for i in books][:5]
        for i in o:
            book_name_keyboard.add(i)
        # book_name_keyboard.add(*o)
        else_keyboard = types.KeyboardButton('üîç –î—Ä—É–≥–∞—è –∫–Ω–∏–≥–∞')
        next_keyboard = types.KeyboardButton('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è')
        korzina_keyboard = types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞')
        book_name_keyboard.add(else_keyboard, next_keyboard, korzina_keyboard)
        bot.send_message(message.from_user.id, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=book_name_keyboard)
        bot.register_next_step_handler(message, description)

def description(message):
    books = [i[0] for i in data.get_products()]
    if message.text in books:
        about = [i for i in data.get_about(message.text)]

        user_cart[message.from_user.id] = {}
        user_cart[message.from_user.id]['Book'] = message.text
        user_cart[message.from_user.id]['Price'] = about[0][1]

        count_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        o = [str(i) for i in range(1,5)]
        count_keyboard.add(*o)
        back_keyboard = types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
        count_keyboard.add(back_keyboard)
        bot.send_photo(message.from_user.id, photo=about[0][2], caption=f'{about[0][-1]}\n\n–¶–µ–Ω–∞: {about[0][1]} —Å—É–º')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á—Å–µ—Å—Ç–≤–æ:', reply_markup=count_keyboard)
        bot.register_next_step_handler(message, add_to_korzina)
    elif message.text =='–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è':
        book_name_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        books = data.get_products()
        o = [i[0] for i in books][5:]
        for i in o:
            book_name_keyboard.add(i)
        else_keyboard = types.KeyboardButton('üîç –î—Ä—É–≥–∞—è –∫–Ω–∏–≥–∞')
        back_keyboard = types.KeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è')
        korzina_keyboard = types.KeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞')
        book_name_keyboard.add(back_keyboard, else_keyboard, korzina_keyboard)
        bot.send_message(message.from_user.id, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=book_name_keyboard)
        bot.register_next_step_handler(message, back_or_next)

    else:
        product(message)

def back_or_next(message):
    if message.text == '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è':
        product(message)
    elif message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        product(message)
        message.text = 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
    else:
        description(message)
        message.text = message.text

def add_to_korzina(message):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        product(message)
    else:
        count = message.text
        book_name = user_cart[message.from_user.id]['Book']
        book_price = user_cart[message.from_user.id]['Price']
        user_cart[message.from_user.id]['Count'] = count
        data.add_cart(message.from_user.id, book_name, book_price, count)

        bot.send_message(message.from_user.id, f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:\n\n{user_cart[message.from_user.id]["Count"]} ‚úñÔ∏è {user_cart[message.from_user.id]["Book"]} = {int(user_cart[message.from_user.id]["Count"])*int(user_cart[message.from_user.id]["Price"])} —Å—É–º')
        confirm = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        prodoljit = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏–º ‚û°Ô∏è')
        oformit = types.KeyboardButton('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å')
        confirm.add(prodoljit,oformit)
        bot.send_message(message.from_user.id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑', reply_markup=confirm)
        bot.register_next_step_handler(message, prodoljit_ili_oformit, 'o')

def prodoljit_ili_oformit(message, n):
    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏–º ‚û°Ô∏è':
        product(message)
    elif message.text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å':
        pass
    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å':
        users_cart = data.get_cart(message.from_user.id)
        order = n
        deleter = types.ReplyKeyboardMarkup(resize_keyboard=True)
        o = [i[1] for i in users_cart]
        deleter.add(*o)
        bot.send_message(message.from_user.id, f'–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n\n{order}', reply_markup=deleter)
        bot.register_next_step_handler(message, delete)
    else:
        product(message)

def delete(message):
    user_cart_name = data.get_cart_name(message.text)
    bot.send_message(message.from_user.id, f'–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω —Å –∫–æ—Ä–∑–∏–Ω—ã:\n\n{message.text}')
    message.text = 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
    product(message)

def feedback(message):
    bot.send_message(message.from_user.id, 'hi')

bot.polling()
